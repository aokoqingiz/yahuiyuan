

c++需要与系统接洽，其中linux属于后台开发，而windows属于服务端开发。
后台开发与操作系统相关性很大。
UNIX网络编程，多线程编程

刷题？

web服务器：
apache，重量级
Lighttpd，轻量级///应用什么的我不知道但是非常轻量级吧应该。
Nginx是一款高性能的HTTP和反向代理服务器，能够选择高效的epoll、kqueue、eventport最为网络I/O模型，在高连接并发的情况下，能够支持高达5万个并发连接数的响应，而内存、CPU等系统资源消耗却非常低，运行非常稳定。主适合处理高并发。

redis, redis作为缓存使用，也就是缓存数据库，多语言支持，非关系型数据库。必要学习。
mysql：关系型数据库，应用也还算可以吧
gcc, gdb：调试工具
c++内存管理，听说有，但我不想管他！你记得写就好了啊！用智能指针也行
boost库是c++标准库的后备库。。标准库中没有的它可能也有。，qt是c++界面编程
“内聚性”和“耦合性”：高内聚，低耦合。



网络：

精通Socket网络编程，对TCP/IP协议要非常熟悉。
熟悉常用的应层协议如http, ftp, smpt, pop3。
能够根据需要设计专用应用层协议。
能够根据业务场景调整操作系统或开源工具的的网络参数。
能够根据产品运行的局域网和广域网环境优化接入机制。

并发：

熟练应用操作系统提供的进程间通信机制。
清楚地知道多线程与多进程成各自的优缺点以及它们的应用场景。
数据并发访问机制。
无锁编程技术。
并发设计模式。
同步异步程序设计，了解他们的优缺点，根据具体场景灵活使用。



数据存储:

mysql数据库运行机制，清楚各种存储引擎的特点
了解mysql的索引设计机制，知道基本的优化方法。
能够使用各种nosql数据库。
数据主备方案设计
数据cache设计



静态代码分析工具

运行时故障定位工具top,free,iostat,mpstat,












Jni，Java与其他平台（主要是c++和c）的接口。GPU编程也就是cuda编程。
我觉得暂时还是先不要管什么分布式的问题。后台开发并不一定会用到分布式。



java的SSH：
Java三大框架主要用来做WEB应用。

Struts主要负责表示层的显示
Spring利用它的IOC和AOP来处理控制业务（负责对数据库的操作）
Hibernate主要是数据持久化到数据库

还有一组SSM：（好像这个现在用的更多了啊。）
java三大框架：
SSM 则指的是 SpringMVC 做前端控制器（接收前端数据），Spring 管理各层的组件，MyBatis 负责持久化层。
现在好像是SSM用的更多啊。

后台开发的三层：
UI：表现层，主要指的是与用户交互的界面。用于接受用户输入的数据和显示处理后反馈给用户的数据。
BLL：业务逻辑层，实现主要的业务工作，包含验证，计算，业务规则等。又叫service
DAL：与数据库打交道，主要实现数据库的增删改查，将存储在数据库中的数据提交给业务层，同时将业务层处理的数据保存到数据库。，所有文件都加上dao（data access object）















安全：

对称加密算法，非对称加密算法，摘要算法。
SQL注入，跨站攻击，内存溢出防范方法。
了解https原理，能够根据情况设计安全方案。
容错设计。
容灾设计。
故障定位：

分布式：


数据同步的算法。
数据/服务分片算法。
负载均衡的设计方案。
客户端接入设计。
可用性设计。
扩展性设计。